(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(22);


/***/ },
/* 1 */,
/* 2 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("@angular/forms");

/***/ },
/* 9 */,
/* 10 */
/***/ function(module, exports) {

	module.exports = require("@telerik/kendo-dropdowns-common/dist/npm/js/bundle");

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("./templates/item-template.directive");

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = require("./templates/header-template.directive");

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = require("./templates/footer-template.directive");

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = require("./common/keys");

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = require("./selection.service");

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = require("./util");

/***/ },
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/* tslint:disable:max-line-length */
	__webpack_require__(2);
	var core_1 = __webpack_require__(7);
	var forms_1 = __webpack_require__(8);
	var keys_1 = __webpack_require__(14);
	var util_1 = __webpack_require__(16);
	var bundle_1 = __webpack_require__(10);
	var selection_service_1 = __webpack_require__(15);
	var item_template_directive_1 = __webpack_require__(11);
	var value_template_directive_1 = __webpack_require__(23);
	var header_template_directive_1 = __webpack_require__(12);
	var footer_template_directive_1 = __webpack_require__(13);
	/**
	 * @hidden
	 */
	exports.DROPDOWNLIST_VALUE_ACCESSOR = {
	    multi: true,
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return DropDownListComponent; })
	};
	/**
	 * Represents the Kendo UI DropDownList component for Angular.
	 *
	 * @example <caption>Basic Usage</caption>
	 * ```ts-preview
	 * @Component({
	 * selector: 'my-app',
	 * template: `
	 *  <kendo-dropdownlist [data]="listItems">
	 *  </kendo-dropdownlist>
	 * `
	 * })
	 * class AppComponent {
	 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
	 * }
	 * ```
	 */
	var DropDownListComponent = (function () {
	    function DropDownListComponent(selectionService, wrapper) {
	        /**
	         * Configures the popup of the DropDownList. The available options of the `IPopupSettings` are:
	         *
	         * - `width: Number`&mdash;Sets the width of the popup container. By default will be used the width of the host element.
	         * - `height: Number`&mdash;Sets the height of the popup container. By default height is 200px.
	         */
	        this.popupSettings = { height: 200 };
	        /**
	         * Sets the disabled state of the component.
	         */
	        this.disabled = false;
	        /**
	         * Enables the [filtering]({% slug overview_ddl_kendouiforangular %}#filtering) functionality of the DropDownList.
	         */
	        this.filterable = false;
	        /**
	         * Enables a case-insensitive search. Use this option when `filtration` is disabled.
	         */
	        this.ignoreCase = true;
	        /**
	         * Sets the delay before an item search is performed. Use this option when `filtration` is disabled.
	         */
	        this.delay = 500;
	        /**
	         * Specifies the type of the selected value. If set to `true`, the selected value has to be of a *primitive* value.
	         *
	         * For more details, refer to the section on
	         * the [`valuePrimitive`]({% slug overview_ddl_kendouiforangular %}#specify-the-value-type) property.
	         */
	        this.valuePrimitive = false;
	        /**
	         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
	         */
	        this.tabIndex = 0;
	        /**
	         * This event is triggered when value is changed.
	         *
	         * For more details, refer to the section on the [`valueChange`]({% slug overview_ddl_kendouiforangular %}#on-value-change) event.
	         */
	        this.valueChange = new core_1.EventEmitter();
	        /**
	         * This event is triggered when the user types in the filter input. You can filter the source
	         * based on the passed filtration value.
	         *
	         * For more details, refer to the section on the [`filterChange`]({% slug overview_ddl_kendouiforangular %}#on-filter-change) event.
	         */
	        this.filterChange = new core_1.EventEmitter();
	        /**
	         * This event is triggered when the item selection is changed.
	         *
	         * For more details, refer to the section on
	         * the [`selectionChange`]({% slug overview_ddl_kendouiforangular %}#on-change-of-item-selection) event.
	         */
	        this.selectionChange = new core_1.EventEmitter();
	        this.listBoxId = util_1.guid();
	        this.optionPrefix = util_1.guid();
	        this.show = false;
	        this.word = "";
	        this.last = "";
	        this.onTouchedCallback = function (_) { };
	        this.onChangeCallback = function (value) { };
	        this.filterText = "";
	        this.selectionService = selectionService;
	        this.changeSubscribtion = this.selectionService.onChange.subscribe(this.handleItemChange.bind(this));
	        this.selectSubscribtion = this.selectionService.onSelect.subscribe(this.handleItemSelect.bind(this));
	        this.wrapper = wrapper.nativeElement;
	    }
	    Object.defineProperty(DropDownListComponent.prototype, "data", {
	        get: function () {
	            return this._data;
	        },
	        /**
	         * Sets the data of the DropDownList.
	         *
	         * > The data has to be provided in an array-like list.
	         */
	        set: function (data) {
	            this._data = data || [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DropDownListComponent.prototype.blur = function (event) {
	        this.onBlur(event);
	    };
	    DropDownListComponent.prototype.keydown = function (event) {
	        this.onKeyDown(event);
	    };
	    DropDownListComponent.prototype.keypress = function (event) {
	        this.onKeyPress(event);
	    };
	    DropDownListComponent.prototype.click = function () {
	        this.toggle();
	    };
	    Object.defineProperty(DropDownListComponent.prototype, "widgetClasses", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "role", {
	        get: function () {
	            return "listbox";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "widgetTabIndex", {
	        get: function () {
	            return this.disabled ? undefined : this.tabIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaDisabled", {
	        get: function () {
	            return this.disabled ? true : undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaHasPopup", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaExpanded", {
	        get: function () {
	            return this.show;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaOwns", {
	        get: function () {
	            return this.listBoxId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaActivedescendant", {
	        get: function () {
	            return this.optionPrefix + "-" + this.value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DropDownListComponent.prototype.ngAfterViewChecked = function () {
	        if (this.show && this.filterInput) {
	            this.filterInput.nativeElement.focus();
	        }
	    };
	    DropDownListComponent.prototype.handleItemChange = function (event) {
	        var index = event.indices.length ? event.indices[0] : undefined;
	        if (!util_1.isPresent(index)) {
	            return;
	        }
	        this.selectionChange.emit(bundle_1.DropDownsUtil.getter(this.data[index], this.valueField));
	        this.change(this.data[index]);
	    };
	    DropDownListComponent.prototype.handleItemSelect = function (event) {
	        var index = event.indices.length ? event.indices[0] : undefined;
	        if (!util_1.isPresent(index)) {
	            return;
	        }
	        if (this.show) {
	            this.dataItem = this.data[index] || this.defaultItem;
	            this.value = bundle_1.DropDownsUtil.getter(this.dataItem, this.valueField);
	            this.selectionChange.emit(bundle_1.DropDownsUtil.getter(this.data[index], this.valueField));
	        }
	        else {
	            this.selectionChange.emit(bundle_1.DropDownsUtil.getter(this.data[index], this.valueField));
	            this.change(this.data[index]);
	        }
	    };
	    DropDownListComponent.prototype.ngOnInit = function () {
	        this.verifySettings();
	    };
	    DropDownListComponent.prototype.ngOnDestroy = function () {
	        if (this.changeSubscribtion) {
	            this.changeSubscribtion.unsubscribe();
	        }
	        if (this.selectSubscribtion) {
	            this.selectSubscribtion.unsubscribe();
	        }
	    };
	    DropDownListComponent.prototype.ngOnChanges = function (changes) {
	        if (util_1.isChanged("value", changes)) {
	            this.verifySettings();
	            this.resolveInternalState({
	                field: "value",
	                value: this.value
	            });
	        }
	        else if (util_1.isChanged("data", changes) || changes.data.isFirstChange()) {
	            this.resolveInternalState({
	                field: "data",
	                value: this.value
	            });
	        }
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.writeValue = function (value) {
	        this.verifySettings();
	        this.resolveInternalState({
	            field: "value",
	            value: value
	        });
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.registerOnChange = function (fn) {
	        this.onChangeCallback = fn;
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.registerOnTouched = function (fn) {
	        this.onTouchedCallback = fn;
	    };
	    DropDownListComponent.prototype.verifySettings = function () {
	        if (core_1.isDevMode()) {
	            if (this.defaultItem && this.valueField && typeof this.defaultItem !== "object") {
	                throw new Error("defaultItem and data items must be of same type");
	            }
	        }
	    };
	    DropDownListComponent.prototype.setHeaderClasses = function () {
	        return {
	            'k-dropdown-wrap': true,
	            'k-state-default': !this.disabled,
	            'k-state-disabled': this.disabled
	        };
	    };
	    DropDownListComponent.prototype.setListContainerClasses = function () {
	        return {
	            'k-list-container': true,
	            'k-reset': true
	        };
	    };
	    DropDownListComponent.prototype.setDefaultItemClasses = function () {
	        return {
	            'k-list-optionlabel': true
	        };
	    };
	    DropDownListComponent.prototype.getDefaultItemText = function () {
	        return bundle_1.DropDownsUtil.getter(this.defaultItem, this.textField);
	    };
	    DropDownListComponent.prototype.getValue = function () {
	        return bundle_1.DropDownsUtil.getter(this.dataItem, this.valueField);
	    };
	    DropDownListComponent.prototype.getText = function () {
	        return bundle_1.DropDownsUtil.getter(this.dataItem, this.textField);
	    };
	    DropDownListComponent.prototype.getWidth = function () {
	        return this.popupSettings.width || this.wrapper.style.width || this.wrapper.offsetWidth + "px";
	    };
	    DropDownListComponent.prototype.getHeight = function () {
	        //defaultItem, filterInput, header, footer ???
	        return this.popupSettings.height;
	    };
	    DropDownListComponent.prototype.onBlur = function (event) {
	        if (this._previousValue !== this.value) {
	            this.change(this.dataItem);
	        }
	        else {
	        }
	        this.onTouchedCallback();
	    };
	    DropDownListComponent.prototype.onMouseDown = function (event) {
	        var tagName = event.target.tagName.toLowerCase();
	        if (tagName !== "input") {
	            event.preventDefault();
	        }
	    };
	    DropDownListComponent.prototype.onKeyDown = function (event) {
	        var keyCode = event.keyCode;
	        var max = this.data.length - 1;
	        var min = this.defaultItem ? -1 : 0;
	        var selected = this.selectionService.selected[0];
	        var handled = false;
	        if (this.disabled) {
	            return;
	        }
	        if (event.altKey && keyCode === keys_1.Keys.down) {
	            event.preventDefault();
	            this.show = true;
	        }
	        else if (event.altKey && keyCode === keys_1.Keys.up) {
	            event.preventDefault();
	            this.show = false;
	        }
	        else if (keyCode === keys_1.Keys.enter || (keyCode === keys_1.Keys.esc)) {
	            //TODO: should esc trigger change or revert value?
	            if (this.show) {
	                this.change(this.data[this.selectionService.focused]);
	            }
	        }
	        else if (keyCode === keys_1.Keys.tab) {
	        }
	        else if (keyCode === keys_1.Keys.up || keyCode === keys_1.Keys.left) {
	            if (!util_1.isPresent(selected)) {
	                selected = max;
	            }
	            else {
	                selected = selected !== min ? selected - 1 : min;
	            }
	            handled = true;
	        }
	        else if (keyCode === keys_1.Keys.down || keyCode === keys_1.Keys.right) {
	            if (!util_1.isPresent(selected)) {
	                selected = min;
	            }
	            else {
	                selected = selected !== max ? selected + 1 : max;
	            }
	            handled = true;
	        }
	        else if (keyCode === keys_1.Keys.home) {
	            selected = min;
	            handled = true;
	        }
	        else if (keyCode === keys_1.Keys.end) {
	            selected = max;
	            handled = true;
	        }
	        if (handled) {
	            event.preventDefault();
	            this.navigate(selected);
	        }
	    };
	    DropDownListComponent.prototype.onKeyPress = function (event) {
	        if (event.which === 0 || event.keyCode === keys_1.Keys.enter) {
	            return;
	        }
	        var character = String.fromCharCode(event.charCode || event.keyCode);
	        if (this.ignoreCase) {
	            character = character.toLowerCase();
	        }
	        if (character === " ") {
	            event.preventDefault();
	        }
	        this.word += character;
	        this.last = character;
	        this.search();
	    };
	    DropDownListComponent.prototype.search = function () {
	        var _this = this;
	        clearTimeout(this.typingTimeout);
	        if (!this.filterable) {
	            this.typingTimeout = setTimeout(function () { _this.word = ""; }, this.delay);
	            this.selectNext();
	        }
	    };
	    DropDownListComponent.prototype.selectNext = function () {
	        var data = this.data.slice();
	        var dataLength = data.length + (this.defaultItem ? 1 : 0);
	        var isInLoop = bundle_1.DropDownsUtil.sameCharsOnly(this.word, this.last);
	        var startIndex = this.selectionService.selected[0] || 0 + (this.defaultItem ? 1 : 0);
	        var text, index;
	        startIndex += isInLoop ? 1 : 0;
	        startIndex = bundle_1.DropDownsUtil.normalizeIndex(startIndex, dataLength);
	        data = bundle_1.DropDownsUtil.shuffleData(data, startIndex, this.defaultItem);
	        index = 0;
	        for (; index < dataLength; index++) {
	            text = bundle_1.DropDownsUtil.getter(data[index], this.textField);
	            if (isInLoop && bundle_1.DropDownsUtil.matchText(text, this.last, this.ignoreCase)) {
	                break;
	            }
	            else if (bundle_1.DropDownsUtil.matchText(text, this.word, this.ignoreCase)) {
	                break;
	            }
	        }
	        if (index !== dataLength) {
	            if (this.defaultItem && bundle_1.DropDownsUtil.getter(data[index], this.valueField) === bundle_1.DropDownsUtil.getter(this.defaultItem, this.valueField)) {
	                this.navigate(-1);
	            }
	            else {
	                this.navigate(bundle_1.DropDownsUtil.normalizeIndex(startIndex + index, dataLength));
	            }
	        }
	    };
	    DropDownListComponent.prototype.toggle = function () {
	        if (!this.disabled) {
	            this.show = !this.show;
	        }
	    };
	    DropDownListComponent.prototype.change = function (dataItem) {
	        this.show = false;
	        if (this._previousValue === bundle_1.DropDownsUtil.getter(dataItem, this.valueField)) {
	            return;
	        }
	        this.dataItem = dataItem || this.defaultItem;
	        this.value = bundle_1.DropDownsUtil.getter(this.dataItem, this.valueField);
	        this.onChangeCallback(this.valuePrimitive ? this.value : this.dataItem);
	        this._previousValue = this.value;
	        this.valueChange.emit(this.valuePrimitive ? this.value : this.dataItem);
	        if (this.filterable) {
	            this.filterText = "";
	            this.filterChange.emit(this.filterText);
	        }
	    };
	    DropDownListComponent.prototype.navigate = function (index) {
	        this.selectionService.select(index);
	    };
	    DropDownListComponent.prototype.resolveInternalState = function (state) {
	        var newValue = bundle_1.DropDownsUtil.getter(state.value, this.valueField) || state.value;
	        if (!this.data) {
	            this.value = newValue;
	            return;
	        }
	        var result = bundle_1.DropDownsUtil.resolveValue({
	            data: this.data,
	            defaultItem: this.defaultItem,
	            value: newValue,
	            valueField: this.valueField
	        });
	        if (result.dataItem) {
	            this.selectionService.resetSelection(result.selected);
	            if (this.filterText) {
	                this.selectionService.focused = 0;
	            }
	            this.dataItem = result.dataItem;
	            this.value = bundle_1.DropDownsUtil.getter(this.dataItem, this.valueField);
	            this._previousValue = this.value;
	        }
	        else {
	            this.selectionService.resetSelection(this.defaultItem ? [-1] : []);
	            this.selectionService.focused = 0;
	            if (state.field === "value" || !this.dataItem) {
	                this.dataItem = this.defaultItem;
	                this._previousValue = this.value;
	            }
	        }
	    };
	    DropDownListComponent.prototype.handleFilter = function (event) {
	        this.filterChange.emit(event.target.value);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], DropDownListComponent.prototype, "data", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DropDownListComponent.prototype, "value", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "textField", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "valueField", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DropDownListComponent.prototype, "popupSettings", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DropDownListComponent.prototype, "defaultItem", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "filterable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "ignoreCase", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], DropDownListComponent.prototype, "delay", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "valuePrimitive", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], DropDownListComponent.prototype, "tabIndex", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], DropDownListComponent.prototype, "valueChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], DropDownListComponent.prototype, "filterChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], DropDownListComponent.prototype, "selectionChange", void 0);
	    __decorate([
	        core_1.ContentChild(item_template_directive_1.ItemTemplateDirective), 
	        __metadata('design:type', item_template_directive_1.ItemTemplateDirective)
	    ], DropDownListComponent.prototype, "itemTemplate", void 0);
	    __decorate([
	        core_1.ContentChild(value_template_directive_1.ValueTemplateDirective), 
	        __metadata('design:type', value_template_directive_1.ValueTemplateDirective)
	    ], DropDownListComponent.prototype, "valueTemplate", void 0);
	    __decorate([
	        core_1.ContentChild(header_template_directive_1.HeaderTemplateDirective), 
	        __metadata('design:type', header_template_directive_1.HeaderTemplateDirective)
	    ], DropDownListComponent.prototype, "headerTemplate", void 0);
	    __decorate([
	        core_1.ContentChild(footer_template_directive_1.FooterTemplateDirective), 
	        __metadata('design:type', footer_template_directive_1.FooterTemplateDirective)
	    ], DropDownListComponent.prototype, "footerTemplate", void 0);
	    __decorate([
	        core_1.ViewChild('filterInput'), 
	        __metadata('design:type', core_1.ElementRef)
	    ], DropDownListComponent.prototype, "filterInput", void 0);
	    __decorate([
	        core_1.HostListener('blur', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropDownListComponent.prototype, "blur", null);
	    __decorate([
	        core_1.HostListener('keydown', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropDownListComponent.prototype, "keydown", null);
	    __decorate([
	        core_1.HostListener('keypress', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [KeyboardEvent]), 
	        __metadata('design:returntype', void 0)
	    ], DropDownListComponent.prototype, "keypress", null);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], DropDownListComponent.prototype, "click", null);
	    __decorate([
	        core_1.HostBinding('class.k-widget'),
	        core_1.HostBinding('class.k-dropdown'),
	        core_1.HostBinding('class.k-header'), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "widgetClasses", null);
	    __decorate([
	        core_1.HostBinding('attr.role'), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "role", null);
	    __decorate([
	        core_1.HostBinding('tabindex'), 
	        __metadata('design:type', Number)
	    ], DropDownListComponent.prototype, "widgetTabIndex", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-disabled'), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "ariaDisabled", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-haspopup'), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "ariaHasPopup", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-expanded'), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "ariaExpanded", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-owns'), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "ariaOwns", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-activedescendant'), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "ariaActivedescendant", null);
	    DropDownListComponent = __decorate([
	        core_1.Component({
	            providers: [exports.DROPDOWNLIST_VALUE_ACCESSOR, selection_service_1.SelectionService],
	            selector: 'kendo-dropdownlist',
	            template: "\n        <span [ngClass]=\"setHeaderClasses()\" unselectable=\"on\">\n            <span #anchor [ngClass]=\"{ 'k-input': true }\" unselectable=\"on\">\n                <template *ngIf=\"valueTemplate\"\n                    [templateContext]=\"{\n                        templateRef: valueTemplate.templateRef,\n                        $implicit: dataItem\n                    }\">\n                </template>\n                <template [ngIf]=\"!valueTemplate\">{{ getText() }}</template>\n            </span>\n            <span [ngClass]=\"{ 'k-select': true }\" unselectable=\"on\">\n                <span [ngClass]=\"{\n                    'k-icon': true,\n                    'k-i-arrow-s': true\n                }\"></span>\n            </span>\n        </span>\n        <kendo-popup *ngIf=\"show\" [anchor]=\"anchor\" [popupClass]=\"setListContainerClasses()\" [style.width]=\"getWidth()\" (mousedown)=\"onMouseDown($event)\">\n            <!--filterable-->\n            <template [ngIf]=\"filterable\">\n                <span [ngClass]=\"{ 'k-list-filter': true }\" (click)=\"$event.stopImmediatePropagation()\">\n                    <input #filterInput [(ngModel)]=\"filterText\" [ngClass]=\"{ 'k-textbox': true }\" (input)=\"handleFilter($event)\" />\n                    <span [ngClass]=\"{ 'k-icon': true, 'k-i-search': true }\" unselectable=\"on\"></span>\n                </span>\n            </template>\n            <!--default item-->\n            <template [ngIf]=\"defaultItem && !itemTemplate\">\n                <div [ngClass]=\"setDefaultItemClasses()\" kendoDropDownsSelectable [index]=\"-1\">\n                    {{ getDefaultItemText() }}\n                </div>\n            </template>\n            <template [ngIf]=\"defaultItem && itemTemplate\">\n                <div [ngClass]=\"setDefaultItemClasses()\" kendoDropDownsSelectable [index]=\"-1\">\n                    <template\n                        [templateContext]=\"{\n                            templateRef: itemTemplate.templateRef,\n                            $implicit: defaultItem\n                        }\">\n                    </template>\n                </div>\n            </template>\n            <!--header template-->\n            <template *ngIf=\"headerTemplate\"\n                [templateContext]=\"{\n                    templateRef: headerTemplate.templateRef\n                }\">\n            </template>\n            <!--list-->\n            <kendo-list\n                [id]=\"listBoxId\"\n                [optionPrefix]=\"optionPrefix\"\n                [data]=\"data\"\n                [textField]=\"textField\"\n                [valueField]=\"valueField\"\n                [template]=\"itemTemplate\"\n                [height]=\"getHeight()\"\n                [show]=\"show\"\n                >\n            </kendo-list>\n            <!--footer template-->\n            <template *ngIf=\"footerTemplate\"\n                [templateContext]=\"{\n                    templateRef: footerTemplate.templateRef\n                }\">\n            </template>\n        </kendo-popup>\n  "
	        }), 
	        __metadata('design:paramtypes', [selection_service_1.SelectionService, core_1.ElementRef])
	    ], DropDownListComponent);
	    return DropDownListComponent;
	}());
	exports.DropDownListComponent = DropDownListComponent;


/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = require("./templates/value-template.directive");

/***/ }
/******/ ])));
//# sourceMappingURL=dropdownlist.component.js.map